
// line 1 "src/rl/picard/http/MultipartParser.rl"
package picard.http;

import java.nio.ByteBuffer;

public final class MultipartParser {
    
// line 97 "src/rl/picard/http/MultipartParser.rl"


    private int cs;

    private int boundaryPos;

    private int bodyStart;
    private int bodyEnd;

    private Object headers;

    private final ByteBuffer boundary;

    private final MultipartParserCallback callback;

    
// line 27 "src/jvm/picard/http/MultipartParser.java"
private static byte[] init__multipart_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    5,    1,
	    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,   11,    1,
	   12,    2,    1,    0,    2,    1,    2,    2,    1,    3,    2,    1,
	    5,    2,    1,    6,    2,    1,    7,    2,    1,    8,    2,    1,
	   10,    2,    1,   11,    2,    2,    0,    2,    2,    4,    2,    2,
	    9,    2,    2,   10,    2,    3,    0,    2,    3,   10,    2,    5,
	    1,    2,    5,   10,    2,    6,    1,    2,    6,   10,    2,    7,
	    8,    2,    7,   10,    2,    8,    0,    2,    8,   10,    2,    9,
	    0,    2,    9,    4,    2,   10,   11,    2,   11,   10,    3,    1,
	    2,    0,    3,    1,    2,    4,    3,    1,    2,    9,    3,    1,
	    2,   10,    3,    1,    5,   10,    3,    1,    6,   10,    3,    1,
	    7,    8,    3,    1,    7,   10,    3,    1,    8,    0,    3,    1,
	    8,   10,    3,    1,   10,   11,    3,    1,   11,   10,    3,    2,
	    1,   10,    3,    2,    3,    0,    3,    2,    4,    1,    3,    2,
	    4,    3,    3,    2,    4,   10,    3,    2,    9,    0,    3,    2,
	    9,    4,    3,    2,    9,   10,    3,    5,    1,   10,    3,    6,
	    1,   10,    3,    6,    7,    8,    3,    7,    1,   10,    3,    7,
	    8,    0,    3,    7,    8,   10,    3,    8,    1,   10,    3,   11,
	    1,   10,    4,    1,    2,    3,    0,    4,    1,    2,    4,    3,
	    4,    1,    2,    4,   10,    4,    1,    2,    9,    0,    4,    1,
	    2,    9,    4,    4,    1,    2,    9,   10,    4,    1,    6,    7,
	    8,    4,    1,    7,    8,    0,    4,    1,    7,    8,   10,    4,
	    2,    3,    0,   10,    4,    2,    4,    1,   10,    4,    2,    4,
	    3,   10,    4,    2,    9,    1,   10,    4,    2,    9,    4,    1,
	    4,    2,    9,    4,   10,    4,    6,    7,    8,    0,    4,    6,
	    7,    8,   10,    4,    7,    8,    1,   10,    5,    1,    2,    9,
	    4,   10,    5,    1,    6,    7,    8,    0,    5,    1,    6,    7,
	    8,   10,    5,    2,    9,    4,    1,   10,    5,    6,    7,    8,
	    1,   10
	};
}

private static final byte _multipart_actions[] = init__multipart_actions_0();


private static byte[] init__multipart_cond_offsets_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    2,    2,    3,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    5,    5,    5,    5,
	    5,    5,    5,    5,    5,    5,    5,    6,    7,    7,    8,    8,
	    8,    8,    8,    8,    8,    9,   10,   11,   12,   12,   12,   12,
	   12,   12,   12,   12,   12,   12,   13,   13,   14,   15,   16,   16,
	   16,   16,   17,   18,   19,   20,   21,   21,   22,   23,   23,   24,
	   25,   26,   27,   28,   28,   29,   29,   29,   29,   29,   29,   29,
	   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
	   42,   43,   44,   45,   46,   47,   48,   49,   50,   50,   51,   51,
	   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,   62
	};
}

private static final byte _multipart_cond_offsets[] = init__multipart_cond_offsets_0();


private static byte[] init__multipart_cond_lengths_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    1,    0,    1,    1,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    1,    1,    0,    1,    0,    0,
	    0,    0,    0,    0,    1,    1,    1,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    1,    0,    1,    1,    1,    0,    0,
	    0,    1,    1,    1,    1,    1,    0,    1,    1,    0,    1,    1,
	    1,    1,    1,    0,    1,    0,    0,    0,    0,    0,    0,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    0,    1,    0,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    0
	};
}

private static final byte _multipart_cond_lengths[] = init__multipart_cond_lengths_0();


private static int[] init__multipart_cond_keys_0()
{
	return new int [] {
	    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,
	    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,
	    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,
	    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,
	    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,
	    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,
	    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,
	    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,
	    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,
	    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,    0,65535,
	    0,65535,    0,65535,    0
	};
}

private static final int _multipart_cond_keys[] = init__multipart_cond_keys_0();


private static byte[] init__multipart_cond_spaces_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0
	};
}

private static final byte _multipart_cond_spaces[] = init__multipart_cond_spaces_0();


private static short[] init__multipart_key_offsets_0()
{
	return new short [] {
	    0,    0,    1,    3,    4,    6,    8,   10,   18,   21,   22,   37,
	   38,   39,   40,   42,   44,   46,   56,   57,   69,  115,  116,  131,
	  133,  135,  153,  157,  163,  165,  183,  202,  250,  254,  260,  261,
	  278,  295,  298,  304,  310,  328,  346,  358,  368,  372,  389,  395,
	  396,  413,  420,  426,  432,  444,  490,  502,  554,  557,  559,  575,
	  577,  593,  612,  631,  649,  653,  701,  720,  737,  754,  771,  778,
	  784,  790,  800,  844,  854,  904,  914,  916,  928,  978,  997, 1009,
	 1059, 1113, 1127, 1137, 1141, 1159, 1165, 1167, 1185, 1192, 1198, 1204,
	 1216, 1268, 1322, 1370, 1418, 1428, 1440, 1486, 1498, 1508, 1556, 1568,
	 1585, 1597, 1643, 1660, 1677, 1694, 1712, 1730, 1748, 1755, 1809, 1828,
	 1882, 1890, 1938, 1950, 1967, 1977, 2023, 2071, 2088, 2105, 2122
	};
}

private static final short _multipart_key_offsets[] = init__multipart_key_offsets_0();


private static int[] init__multipart_trans_keys_0()
{
	return new int [] {
	   13,   10,   13,   13,   10,   13,   13,   45,   13,   45,65545,65549,
	65568,65581,131085,131117,131072,196607,    9,   13,   32,   10,   13,   34,
	   44,   47,  123,  125,  127,    0,   32,   40,   41,   58,   64,   91,
	   93,   10,   13,   13,   10,   13,   13,   45,   13,   45,65545,65549,
	65568,65581,131081,131085,131104,131117,131072,196607,   45,65545,65546,65549,
	65568,65581,131081,131082,131085,131104,131117,131072,196607,65545,65549,65568,
	65569,65581,65582,65660,65662,131081,131085,131104,131105,131116,131117,131119,
	131195,131197,131199,65571,65575,65578,65579,65584,65593,65601,65626,65630,
	65658,65664,131071,131072,131106,131107,131111,131112,131113,131114,131129,131130,
	131136,131137,131162,131163,131165,131166,196607,   10,   13,   34,   44,   47,
	  123,  125,  127,    0,   32,   40,   41,   58,   64,   91,   93,   10,
	   13,   13,   45,    9,   13,   32,   34,   44,   47,   58,  123,  125,
	  127,    0,   31,   40,   41,   59,   64,   91,   93,    9,   13,   32,
	   58,    9,   13,   32,  127,    0,   31,   10,   13,    9,   13,   32,
	   34,   44,   45,   47,  123,  125,  127,    0,   31,   40,   41,   58,
	   64,   91,   93,    9,   13,   32,   34,   44,   45,   47,   58,  123,
	  125,  127,    0,   31,   40,   41,   59,   64,   91,   93,65545,65549,
	65568,65569,65581,65582,65594,65660,65662,131081,131085,131104,131105,131116,
	131117,131119,131130,131195,131197,131199,65571,65575,65578,65579,65584,65593,
	65601,65626,65630,65658,65664,131071,131072,131106,131107,131111,131112,131113,
	131114,131129,131131,131136,131137,131162,131163,131165,131166,196607,    9,   13,
	   32,   58,    9,   13,   32,  127,    0,   31,   10,    9,   13,   32,
	   34,   44,   47,  123,  125,  127,    0,   31,   40,   41,   58,   64,
	   91,   93,    9,   32,   34,   44,   47,   58,  123,  125,  127,    0,
	   31,   40,   41,   59,   64,   91,   93,    9,   32,   58,    9,   13,
	   32,  127,    0,   31,    9,   13,   32,  127,    0,   31,    9,   32,
	   34,   44,   45,   47,   58,  123,  125,  127,    0,   31,   40,   41,
	   59,   64,   91,   93,    9,   13,   32,   34,   44,   47,   58,  123,
	  125,  127,    0,   31,   40,   41,   59,   64,   91,   93,65545,65549,
	65568,65581,65594,131081,131085,131104,131117,131130,131072,196607,65545,65549,
	65568,65581,131081,131085,131104,131117,131072,196607,    9,   13,   32,   45,
	65545,65549,65568,65581,131081,131085,131104,131117,131199,65569,65662,65664,
	131071,131072,131103,131105,196607,    9,   13,   32,  127,    0,   31,   10,
	    9,   13,   32,   34,   44,   47,  123,  125,  127,    0,   31,   40,
	   41,   58,   64,   91,   93,    9,   13,   32,   45,  127,    0,   31,
	    9,   13,   32,  127,    0,   31,    9,   13,   32,  127,    0,   31,
	65545,65546,65549,65568,65581,131081,131082,131085,131104,131117,131072,196607,
	65545,65549,65568,65569,65581,65582,65660,65662,131081,131085,131104,131105,
	131116,131117,131119,131195,131197,131199,65571,65575,65578,65579,65584,65593,
	65601,65626,65630,65658,65664,131071,131072,131106,131107,131111,131112,131113,
	131114,131129,131130,131136,131137,131162,131163,131165,131166,196607,65545,65546,
	65549,65568,65581,131081,131082,131085,131104,131117,131072,196607,65545,65549,
	65568,65569,65580,65581,65583,65659,65661,65663,131081,131085,131104,131105,
	131116,131117,131119,131195,131197,131199,65536,65570,65571,65575,65576,65577,
	65578,65593,65594,65600,65601,65626,65627,65629,65630,131071,131072,131106,
	131107,131111,131112,131113,131114,131129,131130,131136,131137,131162,131163,131165,
	131166,196607,    9,   13,   32,   10,   13,   13,   34,   44,   45,   47,
	  123,  125,  127,    0,   32,   40,   41,   58,   64,   91,   93,   10,
	   13,   13,   34,   44,   45,   47,  123,  125,  127,    0,   32,   40,
	   41,   58,   64,   91,   93,    9,   13,   32,   34,   44,   45,   47,
	   58,  123,  125,  127,    0,   31,   40,   41,   59,   64,   91,   93,
	    9,   13,   32,   34,   44,   45,   47,   58,  123,  125,  127,    0,
	   31,   40,   41,   59,   64,   91,   93,    9,   13,   32,   34,   44,
	   47,   58,  123,  125,  127,    0,   31,   40,   41,   59,   64,   91,
	   93,    9,   13,   32,   58,65545,65549,65568,65569,65581,65582,65594,
	65660,65662,131081,131085,131104,131105,131116,131117,131119,131130,131195,131197,
	131199,65571,65575,65578,65579,65584,65593,65601,65626,65630,65658,65664,
	131071,131072,131106,131107,131111,131112,131113,131114,131129,131131,131136,131137,
	131162,131163,131165,131166,196607,    9,   13,   32,   34,   44,   45,   47,
	   58,  123,  125,  127,    0,   31,   40,   41,   59,   64,   91,   93,
	65545,65549,65568,65581,131081,131085,131104,131117,131199,65569,65662,65664,
	131071,131072,131103,131105,196607,65545,65549,65568,65581,131081,131085,131104,
	131117,131199,65569,65662,65664,131071,131072,131103,131105,196607,65545,65549,
	65568,65581,131081,131085,131104,131117,131199,65569,65662,65664,131071,131072,
	131103,131105,196607,    9,   13,   32,   45,  127,    0,   31,    9,   13,
	   32,  127,    0,   31,    9,   13,   32,  127,    0,   31,65545,65546,
	65549,65568,65581,131082,131085,131117,131072,196607,65545,65549,65568,65569,
	65581,65582,65660,65662,131085,131105,131116,131117,131119,131195,131197,131199,
	65571,65575,65578,65579,65584,65593,65601,65626,65630,65658,65664,131071,
	131072,131106,131107,131111,131112,131113,131114,131129,131130,131136,131137,131162,
	131163,131165,131166,196607,65545,65546,65549,65568,65581,131082,131085,131117,
	131072,196607,65545,65549,65568,65569,65580,65581,65583,65659,65661,65663,
	131085,131105,131116,131117,131119,131195,131197,131199,65536,65570,65571,65575,
	65576,65577,65578,65593,65594,65600,65601,65626,65627,65629,65630,131071,
	131072,131106,131107,131111,131112,131113,131114,131129,131130,131136,131137,131162,
	131163,131165,131166,196607,65545,65549,65568,65581,131085,131117,65536,131071,
	131072,196607,   13,   45,65545,65546,65549,65568,65581,131082,131085,131117,
	65536,131071,131072,196607,65545,65549,65568,65569,65580,65581,65583,65659,
	65661,65663,131085,131105,131116,131117,131119,131195,131197,131199,65536,65570,
	65571,65575,65576,65577,65578,65593,65594,65600,65601,65626,65627,65629,
	65630,131071,131072,131106,131107,131111,131112,131113,131114,131129,131130,131136,
	131137,131162,131163,131165,131166,196607,    9,   13,   32,   34,   44,   45,
	   47,   58,  123,  125,  127,    0,   31,   40,   41,   59,   64,   91,
	   93,65545,65546,65549,65568,65581,131082,131085,131117,65536,131071,131072,
	196607,65545,65549,65568,65569,65580,65581,65583,65659,65661,65663,131085,
	131105,131116,131117,131119,131195,131197,131199,65536,65570,65571,65575,65576,
	65577,65578,65593,65594,65600,65601,65626,65627,65629,65630,131071,131072,
	131106,131107,131111,131112,131113,131114,131129,131130,131136,131137,131162,131163,
	131165,131166,196607,65545,65549,65568,65569,65580,65581,65583,65594,65659,
	65661,65663,131081,131085,131104,131105,131116,131117,131119,131130,131195,131197,
	131199,65536,65570,65571,65575,65576,65577,65578,65593,65595,65600,65601,
	65626,65627,65629,65630,131071,131072,131106,131107,131111,131112,131113,131114,
	131129,131131,131136,131137,131162,131163,131165,131166,196607,65545,65549,65568,
	65581,65594,131081,131085,131104,131117,131130,65536,131071,131072,196607,65545,
	65549,65568,65581,131085,131117,65536,131071,131072,196607,    9,   13,   32,
	   45,65545,65549,65568,65581,65663,131081,131085,131104,131117,131199,65536,
	65567,65569,131071,131072,131103,131105,196607,    9,   13,   32,  127,    0,
	   31,   10,   13,    9,   13,   32,   34,   44,   45,   47,  123,  125,
	  127,    0,   31,   40,   41,   58,   64,   91,   93,    9,   13,   32,
	   45,  127,    0,   31,    9,   13,   32,  127,    0,   31,    9,   13,
	   32,  127,    0,   31,65545,65546,65549,65568,65581,131082,131085,131117,
	65536,131071,131072,196607,65545,65549,65568,65569,65580,65581,65583,65659,
	65661,65663,131081,131085,131104,131105,131116,131117,131119,131195,131197,131199,
	65536,65570,65571,65575,65576,65577,65578,65593,65594,65600,65601,65626,
	65627,65629,65630,131071,131072,131106,131107,131111,131112,131113,131114,131129,
	131130,131136,131137,131162,131163,131165,131166,196607,65545,65549,65568,65569,
	65580,65581,65583,65594,65659,65661,65663,131081,131085,131104,131105,131116,
	131117,131119,131130,131195,131197,131199,65536,65570,65571,65575,65576,65577,
	65578,65593,65595,65600,65601,65626,65627,65629,65630,131071,131072,131106,
	131107,131111,131112,131113,131114,131129,131131,131136,131137,131162,131163,131165,
	131166,196607,65545,65549,65568,65569,65581,65582,65594,65660,65662,131081,
	131085,131104,131105,131116,131117,131119,131130,131195,131197,131199,65571,65575,
	65578,65579,65584,65593,65601,65626,65630,65658,65664,131071,131072,131106,
	131107,131111,131112,131113,131114,131129,131131,131136,131137,131162,131163,131165,
	131166,196607,65545,65549,65568,65569,65581,65582,65594,65660,65662,131081,
	131085,131104,131105,131116,131117,131119,131130,131195,131197,131199,65571,65575,
	65578,65579,65584,65593,65601,65626,65630,65658,65664,131071,131072,131106,
	131107,131111,131112,131113,131114,131129,131131,131136,131137,131162,131163,131165,
	131166,196607,65545,65549,65568,65581,131081,131085,131104,131117,131072,196607,
	65545,65546,65549,65568,65581,131081,131082,131085,131104,131117,131072,196607,
	65545,65549,65568,65569,65581,65582,65660,65662,131081,131085,131104,131105,
	131116,131117,131119,131195,131197,131199,65571,65575,65578,65579,65584,65593,
	65601,65626,65630,65658,65664,131071,131072,131106,131107,131111,131112,131113,
	131114,131129,131130,131136,131137,131162,131163,131165,131166,196607,65545,65546,
	65549,65568,65581,131081,131082,131085,131104,131117,131072,196607,65545,65549,
	65568,65581,131081,131085,131104,131117,131072,196607,65545,65549,65568,65569,
	65581,65582,65594,65660,65662,131081,131085,131104,131105,131116,131117,131119,
	131130,131195,131197,131199,65571,65575,65578,65579,65584,65593,65601,65626,
	65630,65658,65664,131071,131072,131106,131107,131111,131112,131113,131114,131129,
	131131,131136,131137,131162,131163,131165,131166,196607,65545,65549,65568,65581,
	65594,131081,131085,131104,131117,131130,131072,196607,65545,65549,65568,65581,
	131081,131085,131104,131117,131199,65569,65662,65664,131071,131072,131103,131105,
	196607,65545,65546,65549,65568,65581,131081,131082,131085,131104,131117,131072,
	196607,65545,65549,65568,65569,65581,65582,65660,65662,131081,131085,131104,
	131105,131116,131117,131119,131195,131197,131199,65571,65575,65578,65579,65584,
	65593,65601,65626,65630,65658,65664,131071,131072,131106,131107,131111,131112,
	131113,131114,131129,131130,131136,131137,131162,131163,131165,131166,196607,65545,
	65549,65568,65581,131081,131085,131104,131117,131199,65569,65662,65664,131071,
	131072,131103,131105,196607,65545,65549,65568,65581,131081,131085,131104,131117,
	131199,65569,65662,65664,131071,131072,131103,131105,196607,65545,65549,65568,
	65581,131081,131085,131104,131117,131199,65569,65662,65664,131071,131072,131103,
	131105,196607,65545,65549,65568,65581,65663,131081,131085,131104,131117,131199,
	65536,65567,65569,131071,131072,131103,131105,196607,65545,65549,65568,65581,
	65663,131081,131085,131104,131117,131199,65536,65567,65569,131071,131072,131103,
	131105,196607,65545,65549,65568,65581,65663,131081,131085,131104,131117,131199,
	65536,65567,65569,131071,131072,131103,131105,196607,    9,   13,   32,   45,
	  127,    0,   31,65545,65549,65568,65569,65580,65581,65583,65594,65659,
	65661,65663,131081,131085,131104,131105,131116,131117,131119,131130,131195,131197,
	131199,65536,65570,65571,65575,65576,65577,65578,65593,65595,65600,65601,
	65626,65627,65629,65630,131071,131072,131106,131107,131111,131112,131113,131114,
	131129,131131,131136,131137,131162,131163,131165,131166,196607,    9,   13,   32,
	   34,   44,   45,   47,   58,  123,  125,  127,    0,   31,   40,   41,
	   59,   64,   91,   93,65545,65549,65568,65569,65580,65581,65583,65594,
	65659,65661,65663,131081,131085,131104,131105,131116,131117,131119,131130,131195,
	131197,131199,65536,65570,65571,65575,65576,65577,65578,65593,65595,65600,
	65601,65626,65627,65629,65630,131071,131072,131106,131107,131111,131112,131113,
	131114,131129,131131,131136,131137,131162,131163,131165,131166,196607,65545,65549,
	65568,65581,131085,131117,131072,196607,65545,65549,65568,65569,65581,65582,
	65594,65660,65662,131081,131085,131104,131105,131116,131117,131119,131130,131195,
	131197,131199,65571,65575,65578,65579,65584,65593,65601,65626,65630,65658,
	65664,131071,131072,131106,131107,131111,131112,131113,131114,131129,131131,131136,
	131137,131162,131163,131165,131166,196607,65545,65549,65568,65581,65594,131081,
	131085,131104,131117,131130,131072,196607,65545,65549,65568,65581,131081,131085,
	131104,131117,131199,65569,65662,65664,131071,131072,131103,131105,196607,65545,
	65546,65549,65568,65581,131082,131085,131117,131072,196607,65545,65549,65568,
	65569,65581,65582,65660,65662,131081,131085,131104,131105,131116,131117,131119,
	131195,131197,131199,65571,65575,65578,65579,65584,65593,65601,65626,65630,
	65658,65664,131071,131072,131106,131107,131111,131112,131113,131114,131129,131130,
	131136,131137,131162,131163,131165,131166,196607,65545,65549,65568,65569,65581,
	65582,65594,65660,65662,131081,131085,131104,131105,131116,131117,131119,131130,
	131195,131197,131199,65571,65575,65578,65579,65584,65593,65601,65626,65630,
	65658,65664,131071,131072,131106,131107,131111,131112,131113,131114,131129,131131,
	131136,131137,131162,131163,131165,131166,196607,65545,65549,65568,65581,131081,
	131085,131104,131117,131199,65569,65662,65664,131071,131072,131103,131105,196607,
	65545,65549,65568,65581,131081,131085,131104,131117,131199,65569,65662,65664,
	131071,131072,131103,131105,196607,65545,65549,65568,65581,131081,131085,131104,
	131117,131199,65569,65662,65664,131071,131072,131103,131105,196607,    0
	};
}

private static final int _multipart_trans_keys[] = init__multipart_trans_keys_0();


private static byte[] init__multipart_single_lengths_0()
{
	return new byte [] {
	    0,    1,    2,    1,    2,    2,    2,    6,    3,    1,    7,    1,
	    1,    1,    2,    2,    2,    8,    1,   10,   18,    1,    7,    2,
	    2,   10,    4,    4,    2,   10,   11,   20,    4,    4,    1,    9,
	    9,    3,    4,    4,   10,   10,   10,    8,    4,    9,    4,    1,
	    9,    5,    4,    4,   10,   18,   10,   20,    3,    2,    8,    2,
	    8,   11,   11,   10,    4,   20,   11,    9,    9,    9,    5,    4,
	    4,    8,   16,    8,   18,    6,    2,    8,   18,   11,    8,   18,
	   22,   10,    6,    4,   10,    4,    2,   10,    5,    4,    4,    8,
	   20,   22,   20,   20,    8,   10,   18,   10,    8,   20,   10,    9,
	   10,   18,    9,    9,    9,   10,   10,   10,    5,   22,   11,   22,
	    6,   20,   10,    9,    8,   18,   20,    9,    9,    9,    0
	};
}

private static final byte _multipart_single_lengths[] = init__multipart_single_lengths_0();


private static byte[] init__multipart_range_lengths_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    4,    0,
	    0,    0,    0,    0,    0,    1,    0,    1,   14,    0,    4,    0,
	    0,    4,    0,    1,    0,    4,    4,   14,    0,    1,    0,    4,
	    4,    0,    1,    1,    4,    4,    1,    1,    0,    4,    1,    0,
	    4,    1,    1,    1,    1,   14,    1,   16,    0,    0,    4,    0,
	    4,    4,    4,    4,    0,   14,    4,    4,    4,    4,    1,    1,
	    1,    1,   14,    1,   16,    2,    0,    2,   16,    4,    2,   16,
	   16,    2,    2,    0,    4,    1,    0,    4,    1,    1,    1,    2,
	   16,   16,   14,   14,    1,    1,   14,    1,    1,   14,    1,    4,
	    1,   14,    4,    4,    4,    4,    4,    4,    1,   16,    4,   16,
	    1,   14,    1,    4,    1,   14,   14,    4,    4,    4,    0
	};
}

private static final byte _multipart_range_lengths[] = init__multipart_range_lengths_0();


private static short[] init__multipart_index_offsets_0()
{
	return new short [] {
	    0,    0,    2,    5,    7,   10,   13,   16,   24,   28,   30,   42,
	   44,   46,   48,   51,   54,   57,   67,   69,   81,  114,  116,  128,
	  131,  134,  149,  154,  160,  163,  178,  194,  229,  234,  240,  242,
	  256,  270,  274,  280,  286,  301,  316,  328,  338,  343,  357,  363,
	  365,  379,  386,  392,  398,  410,  443,  455,  492,  496,  499,  512,
	  515,  528,  544,  560,  575,  580,  615,  631,  645,  659,  673,  680,
	  686,  692,  702,  733,  743,  778,  787,  790,  801,  836,  852,  863,
	  898,  937,  950,  959,  964,  979,  985,  988, 1003, 1010, 1016, 1022,
	 1033, 1070, 1109, 1144, 1179, 1189, 1201, 1234, 1246, 1256, 1291, 1303,
	 1317, 1329, 1362, 1376, 1390, 1404, 1419, 1434, 1449, 1456, 1495, 1511,
	 1550, 1558, 1593, 1605, 1619, 1629, 1662, 1697, 1711, 1725, 1739
	};
}

private static final short _multipart_index_offsets[] = init__multipart_index_offsets_0();


private static short[] init__multipart_indicies_0()
{
	return new short [] {
	    1,    0,    2,    1,    0,    3,    0,    4,    1,    0,    3,    5,
	    0,    1,    6,    0,    8,    9,    8,   10,   12,   13,   11,    7,
	    8,    9,    8,    7,   14,    7,   15,    7,    7,    7,    7,    7,
	    7,    7,    7,    7,    7,   16,   17,    7,   19,   18,   21,   20,
	   22,   21,   20,   21,   23,   20,   21,   24,   20,   25,   26,   25,
	   27,   29,   30,   29,   31,   28,    7,   32,    7,   25,   14,   26,
	   25,   27,   29,   33,   30,   29,   31,   28,    7,   25,   34,   25,
	   16,   35,   16,   16,   16,   29,   36,   29,   37,   28,   38,   28,
	   28,   28,   28,   16,   16,   16,   16,   16,   16,   28,   37,   28,
	   37,   28,   37,   28,   37,    7,   39,    7,   40,   18,   18,   18,
	   18,   18,   18,   18,   18,   18,   18,   41,   42,   21,   20,   19,
	   43,   18,   44,   21,   44,   20,   20,   20,   46,   20,   20,   20,
	   20,   20,   20,   20,   45,   47,   21,   47,   48,   20,   48,   49,
	   48,   20,   20,   50,   51,   21,   20,   48,   52,   48,   20,   20,
	   54,   20,   20,   20,   20,   20,   20,   20,   20,   53,   44,   21,
	   44,   20,   20,   55,   20,   46,   20,   20,   20,   20,   20,   20,
	   20,   45,   56,   26,   56,   57,   58,   57,   59,   57,   57,   60,
	   30,   60,   61,   28,   62,   28,   63,   28,   28,   28,   57,   57,
	   57,   57,   57,   57,   28,   61,   28,   61,   28,   61,   28,   61,
	    7,   64,    9,   64,   65,    7,   65,   66,   65,    7,    7,   67,
	   68,    7,   65,   69,   65,    7,    7,    7,    7,    7,    7,    7,
	    7,    7,    7,   70,   71,   71,    7,    7,    7,   59,    7,    7,
	    7,    7,    7,    7,    7,   57,   72,   72,   65,    7,   73,   74,
	   73,    7,    7,   75,   76,   77,   76,    7,    7,   75,   71,   71,
	    7,    7,   78,    7,   59,    7,    7,    7,    7,    7,    7,    7,
	   57,   79,    9,   79,    7,    7,    7,   59,    7,    7,    7,    7,
	    7,    7,    7,   57,   80,   26,   80,   27,   65,   81,   30,   81,
	   31,   82,   28,    7,   25,   26,   25,   83,   29,   30,   29,   84,
	   28,    7,    8,    9,    8,   32,    7,   85,   86,   85,   87,   88,
	   89,   88,   91,   28,   67,   67,   28,   90,    7,   92,   93,   92,
	    7,    7,   67,   94,    7,   65,   95,   65,    7,    7,    7,    7,
	    7,    7,    7,    7,    7,    7,   96,   73,   74,   73,   97,    7,
	    7,   75,   98,   99,   98,    7,    7,   75,  100,  101,  100,    7,
	    7,   75,   25,   94,   26,   25,   27,   29,  102,   30,   29,   31,
	   28,    7,   85,  103,   85,   96,  104,   96,   96,   96,   88,  105,
	   88,  106,   28,  107,   28,   28,   28,   28,   96,   96,   96,   96,
	   96,   96,   28,  106,   28,  106,   28,  106,   28,  106,    7,   25,
	   39,   26,   25,   27,   29,  108,   30,   29,   31,   28,    7,  109,
	  110,  109,   41,   18,  111,   18,   18,   18,   18,   29,   36,   29,
	   37,   28,   38,   28,   28,   28,   28,   18,   41,   18,   41,   18,
	   41,   18,   41,   28,   37,   28,   37,   28,   37,   28,   37,    7,
	  112,  113,  112,   20,  114,   21,   20,  115,   20,   20,  117,   20,
	   20,   20,   20,   20,   20,   20,   20,  116,  118,   21,   20,   40,
	   18,   18,  119,   18,   18,   18,   18,   18,   18,   18,   18,   41,
	   44,   21,   44,   20,   20,   24,   20,   46,   20,   20,   20,   20,
	   20,   20,   20,   45,   44,   21,   44,   20,   20,  120,   20,   46,
	   20,   20,   20,   20,   20,   20,   20,   45,  121,  113,  121,   20,
	   20,   20,   46,   20,   20,   20,   20,   20,   20,   20,   45,  122,
	  113,  122,   48,   20,   56,   26,   56,   57,  123,   57,   59,   57,
	   57,   60,   30,   60,   61,   28,  124,   28,   63,   28,   28,   28,
	   57,   57,   57,   57,   57,   57,   28,   61,   28,   61,   28,   61,
	   28,   61,    7,   79,    9,   79,    7,    7,   78,    7,   59,    7,
	    7,    7,    7,    7,    7,    7,   57,  125,  126,  125,  127,  128,
	  129,  128,  131,   28,   75,   75,   28,  130,    7,  132,  133,  132,
	  127,  134,  135,  134,  131,   28,   75,   75,   28,  130,    7,  125,
	  126,  125,  136,  128,  129,  128,  137,   28,   75,   75,   28,  130,
	    7,   98,   99,   98,   97,    7,    7,   75,  138,  139,  138,   20,
	   20,  140,  141,  142,  141,   20,   20,  140,    8,   14,    9,    8,
	   10,  143,   12,   13,   11,    7,    8,  144,    8,   16,  145,   16,
	   16,   16,  146,  147,   11,  148,   11,   11,   11,   11,   16,   16,
	   16,   16,   16,   16,   11,  147,   11,  147,   11,  147,   11,  147,
	    7,    8,   39,    9,    8,   10,  149,   12,   13,   11,    7,  150,
	  151,  150,   41,   18,  152,   18,   18,   18,   18,  154,  155,  153,
	  156,  153,  153,  153,  153,   18,   41,   18,   41,   18,   41,   18,
	   41,  153,  155,  153,  155,  153,  155,  153,  155,    7,  112,  113,
	  112,  157,  159,  160,   20,  158,    7,   21,  161,   20,  112,  114,
	  113,  112,  157,  162,  159,  160,   20,  158,    7,  112,  163,  112,
	  116,   20,  164,   20,   20,   20,   20,  165,  166,  158,  167,  158,
	  158,  158,  158,   20,  116,   20,  116,   20,  116,   20,  116,  158,
	  166,  158,  166,  158,  166,  158,  166,    7,   44,   21,   44,   20,
	   20,  168,   20,   46,   20,   20,   20,   20,   20,   20,   20,   45,
	  112,  118,  113,  112,  157,  169,  159,  160,   20,  158,    7,  150,
	  151,  150,   41,   18,  119,   18,   18,   18,   18,  154,  155,  153,
	  170,  153,  153,  153,  153,   18,   41,   18,   41,   18,   41,   18,
	   41,  153,  155,  153,  155,  153,  155,  153,  155,    7,  121,  113,
	  121,   45,   20,  171,   20,   46,   20,   20,   20,  172,  159,  172,
	  173,  158,  174,  158,  175,  158,  158,  158,   20,   45,   20,   45,
	   20,   45,   20,   45,  158,  173,  158,  173,  158,  173,  158,  173,
	    7,  122,  113,  122,  157,   48,  176,  159,  176,  160,  177,   20,
	  158,    7,  112,  113,  112,  178,  159,  179,   20,  158,    7,  112,
	  113,  112,  161,   20,  180,  181,  180,  182,   20,  177,  183,  177,
	  185,  158,   20,   50,  158,  184,    7,  180,  181,  180,   20,   20,
	   50,  186,   21,   20,   48,  187,   48,   20,   20,  189,   20,   20,
	   20,   20,   20,   20,   20,   20,  188,  138,  139,  138,  190,   20,
	   20,  140,  191,  192,  191,   20,   20,  140,  193,  194,  193,   20,
	   20,  140,  112,  186,  113,  112,  157,  195,  159,  160,   20,  158,
	    7,  180,  196,  180,  188,   20,  197,   20,   20,   20,   20,  177,
	  198,  177,  199,  158,  200,  158,  158,  158,  158,   20,  188,   20,
	  188,   20,  188,   20,  188,  158,  199,  158,  199,  158,  199,  158,
	  199,    7,  121,  113,  121,   45,   20,  201,   20,   46,   20,   20,
	   20,  172,  159,  172,  173,  158,  202,  158,  175,  158,  158,  158,
	   20,   45,   20,   45,   20,   45,   20,   45,  158,  173,  158,  173,
	  158,  173,  158,  173,    7,   56,   26,   56,   57,  203,   57,   59,
	   57,   57,   60,   30,   60,   61,   28,  204,   28,   63,   28,   28,
	   28,   57,   57,   57,   57,   57,   57,   28,   61,   28,   61,   28,
	   61,   28,   61,    7,   56,   26,   56,   57,  203,   57,   59,   57,
	   57,  206,  207,  206,  208,  205,  209,  205,  210,  205,  205,  205,
	   57,   57,   57,   57,   57,   57,  205,  208,  205,  208,  205,  208,
	  205,  208,    7,   25,   26,   25,   27,  211,  207,  211,  212,  205,
	    7,   25,   14,   26,   25,   27,  211,  213,  207,  211,  212,  205,
	    7,   25,   34,   25,   16,   35,   16,   16,   16,  211,  214,  211,
	  215,  205,  216,  205,  205,  205,  205,   16,   16,   16,   16,   16,
	   16,  205,  215,  205,  215,  205,  215,  205,  215,    7,   25,   39,
	   26,   25,   27,  211,  108,  207,  211,  212,  205,    7,   25,   26,
	   25,  217,  211,  207,  211,  218,  205,    7,   56,   26,   56,   57,
	   58,   57,   59,   57,   57,  206,  207,  206,  208,  205,  219,  205,
	  210,  205,  205,  205,   57,   57,   57,   57,   57,   57,  205,  208,
	  205,  208,  205,  208,  205,  208,    7,   80,   26,   80,   27,   65,
	  220,  207,  220,  212,  221,  205,    7,   85,   86,   85,   87,  222,
	  223,  222,  225,  205,   67,   67,  205,  224,    7,   25,   94,   26,
	   25,   27,  211,  226,  207,  211,  212,  205,    7,   85,  103,   85,
	   96,  104,   96,   96,   96,  222,  227,  222,  228,  205,  229,  205,
	  205,  205,  205,   96,   96,   96,   96,   96,   96,  205,  228,  205,
	  228,  205,  228,  205,  228,    7,  125,  126,  125,  127,  230,  231,
	  230,  233,  205,   75,   75,  205,  232,    7,  132,  133,  132,  127,
	  234,  235,  234,  233,  205,   75,   75,  205,  232,    7,  125,  126,
	  125,  236,  230,  231,  230,  237,  205,   75,   75,  205,  232,    7,
	  191,  192,  191,  238,   20,  239,  240,  239,  242,  158,   20,  140,
	  158,  241,    7,  193,  194,  193,  238,   20,  243,  244,  243,  242,
	  158,   20,  140,  158,  241,    7,  191,  192,  191,  245,   20,  239,
	  240,  239,  246,  158,   20,  140,  158,  241,    7,  191,  192,  191,
	  190,   20,   20,  140,  121,  113,  121,   45,   20,  247,   20,   46,
	   20,   20,   20,  172,  159,  172,  173,  158,  248,  158,  175,  158,
	  158,  158,   20,   45,   20,   45,   20,   45,   20,   45,  158,  173,
	  158,  173,  158,  173,  158,  173,    7,  121,  113,  121,   20,   20,
	  120,   20,   46,   20,   20,   20,   20,   20,   20,   20,   45,  121,
	  113,  121,   45,   20,   24,   20,   46,   20,   20,   20,  172,  159,
	  172,  173,  158,   24,  158,  175,  158,  158,  158,   20,   45,   20,
	   45,   20,   45,   20,   45,  158,  173,  158,  173,  158,  173,  158,
	  173,    7,    8,    9,    8,  249,   12,  250,   11,    7,   79,    9,
	   79,   57,  251,   57,   59,   57,   57,  252,   12,  252,  253,   11,
	  254,   11,  255,   11,   11,   11,   57,   57,   57,   57,   57,   57,
	   11,  253,   11,  253,   11,  253,   11,  253,    7,   64,    9,   64,
	   10,   65,  256,   12,  256,   13,  257,   11,    7,   92,   93,   92,
	  258,  257,  259,  257,  261,   11,   67,   67,   11,  260,    7,    8,
	   94,    9,    8,   10,  262,   12,   13,   11,    7,   92,  263,   92,
	   96,  264,   96,   96,   96,  257,  265,  257,  266,   11,  267,   11,
	   11,   11,   11,   96,   96,   96,   96,   96,   96,   11,  266,   11,
	  266,   11,  266,   11,  266,    7,   79,    9,   79,   57,  268,   57,
	   59,   57,   57,  252,   12,  252,  253,   11,  269,   11,  255,   11,
	   11,   11,   57,   57,   57,   57,   57,   57,   11,  253,   11,  253,
	   11,  253,   11,  253,    7,   98,   99,   98,  270,  271,  272,  271,
	  274,   11,   75,   75,   11,  273,    7,  100,  101,  100,  270,  275,
	  276,  275,  274,   11,   75,   75,   11,  273,    7,   98,   99,   98,
	  277,  271,  272,  271,  278,   11,   75,   75,   11,  273,    7,  279,
	    0
	};
}

private static final short _multipart_indicies[] = init__multipart_indicies_0();


private static short[] init__multipart_trans_targs_0()
{
	return new short [] {
	    1,    2,    3,    4,    5,    6,    7,    0,    8,    9,   18,    7,
	   73,  120,   10,   11,   36,   12,   13,   14,   13,   14,   15,   16,
	   17,    8,    9,   18,   17,   17,   19,   43,    8,   20,   21,   40,
	   54,   31,   65,   22,   23,   25,   24,   16,   26,   25,   27,   26,
	   27,   28,   71,   29,   23,   25,   30,   31,   32,   36,   40,   33,
	   42,   31,   65,   45,   32,   33,   34,   38,   35,   11,   36,   37,
	   37,   39,   34,   38,   39,   34,   41,   32,   32,   42,   45,   44,
	   43,   46,   47,   49,   45,   52,   67,   69,   46,   47,   48,   11,
	   36,   50,   51,   47,   51,   47,   53,   21,   40,   54,   31,   65,
	   55,   56,   59,   62,   56,   57,   58,   23,   25,   30,   60,   61,
	   63,   64,   64,   66,   65,   51,   47,   49,   68,   52,   67,   69,
	   51,   47,   68,   52,   70,   69,   72,   28,   71,   72,   28,   74,
	   21,   40,   75,  121,  126,   76,   56,   59,   62,   77,   82,   84,
	  117,   78,   77,   79,   86,   56,   80,   59,   81,   82,   84,   97,
	   31,   83,  119,   62,   85,   84,  117,   88,   85,   88,   87,   86,
	   89,   90,   92,   95,  113,  115,   91,   23,   25,   30,   93,   94,
	   90,   94,   90,   96,   59,   81,   82,   84,   97,   98,   99,   66,
	   65,  100,  106,  101,  105,   99,  107,  100,  104,  102,  103,  105,
	   99,   44,  104,   99,  106,  107,  107,  108,  110,  112,  109,  103,
	  105,   99,  111,  108,  110,  112,  111,  108,   70,  112,   92,  114,
	   95,  113,  115,  114,   95,  116,  115,  118,  117,   44,  120,   40,
	  122,  121,  126,  123,  122,  123,   49,  124,  127,  129,  125,   21,
	   40,   75,  121,  126,   66,  126,   49,  128,  124,  127,  129,  128,
	  124,   70,  129,  130
	};
}

private static final short _multipart_trans_targs[] = init__multipart_trans_targs_0();


private static short[] init__multipart_trans_actions_0()
{
	return new short [] {
	    0,    0,    0,    1,    0,    0,    0,   23,    0,    0,    0,    3,
	    3,    3,    0,    5,   55,    0,    7,   64,    0,    1,    0,    0,
	    0,   19,   19,   19,    3,   46,   46,   46,   21,    3,   61,  170,
	  154,  162,  268,    0,  158,  166,    0,    7,    9,    0,    9,    0,
	    0,  293,   11,    0,   94,   97,   97,    0,   73,    0,   19,    9,
	  186,    3,   46,   70,    0,    0,  194,   11,    0,   17,   97,    9,
	    0,   13,   82,    0,    0,   15,   21,    9,   19,   46,    3,  100,
	  146,   19,  298,   79,   46,  332,   76,  190,    0,  194,    0,   58,
	  178,   21,   13,   82,    0,   15,    3,  182,  288,  278,  283,  326,
	    3,   67,  263,  273,    0,    1,    0,   52,   55,   55,    0,  166,
	   21,    9,    0,  100,  146,   85,  206,   19,  198,  303,    3,   46,
	   19,   91,   46,  210,  100,  146,   13,  202,    0,    0,   88,    3,
	    5,   55,   28,  110,  110,    3,    7,  158,  166,   31,  218,  223,
	  223,    0,    3,   25,    3,   21,    3,   52,   55,  106,  110,  110,
	   21,    3,  223,    0,   34,    3,    3,   34,    3,    3,   21,   49,
	    0,  293,   11,  314,   37,   37,    0,  174,  178,  178,   21,   13,
	  202,    0,   88,    3,  174,  178,  233,  238,  238,   21,   49,  103,
	  214,    3,  122,   46,    3,  150,   34,   46,   46,    3,  118,  110,
	  228,  103,  150,   46,   46,    3,   46,  320,   37,  126,    3,  243,
	  238,  308,  134,  258,    3,   46,   46,  142,  103,  150,    0,   40,
	  253,    3,    3,    3,  138,   21,   49,   21,   49,   21,   49,    0,
	   34,    3,    3,   34,    3,    3,   11,  248,   37,   37,    3,   58,
	  178,  114,  238,  238,   21,   49,    0,   40,  130,    3,    3,    3,
	   43,   21,   49,    0
	};
}

private static final short _multipart_trans_actions[] = init__multipart_trans_actions_0();


private static short[] init__multipart_eof_actions_0()
{
	return new short [] {
	    0,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
	   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
	   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
	   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
	   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
	   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
	   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
	   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
	   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
	   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
	   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,   23
	};
}

private static final short _multipart_eof_actions[] = init__multipart_eof_actions_0();


static final int multipart_start = 1;
static final int multipart_first_final = 131;
static final int multipart_error = 0;

static final int multipart_en_main = 1;
static final int multipart_en_main_multipart_start = 1;
static final int multipart_en_main_multipart_body = 13;
static final int multipart_en_main_multipart_epilogue = 130;


// line 113 "src/rl/picard/http/MultipartParser.rl"

    public MultipartParser(ByteBuffer boundary, MultipartParserCallback callback) {
        
// line 662 "src/jvm/picard/http/MultipartParser.java"
	{
	cs = multipart_start;
	}

// line 116 "src/rl/picard/http/MultipartParser.rl"

        this.boundary = boundary;
        this.callback = callback;
    }

    public void execute(ByteBuffer buf) {
        // Setup ragel variables
        int p   = buf.position();
        int pe  = buf.limit();
        int eof = pe + 1;

        
// line 128 "src/rl/picard/http/MultipartParser.rl"
        
// line 682 "src/jvm/picard/http/MultipartParser.java"
	{
	int _klen;
	int _trans = 0;
	int _widec;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_widec = ( buf.get(p));
	_keys = _multipart_cond_offsets[cs]*2
;	_klen = _multipart_cond_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys
;		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _multipart_cond_keys[_mid] )
				_upper = _mid - 2;
			else if ( _widec > _multipart_cond_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				switch ( _multipart_cond_spaces[_multipart_cond_offsets[cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = 65536 + (( buf.get(p)) - 0);
		if ( 
// line 15 "src/rl/picard/http/MultipartParser.rl"

            boundaryPos < boundary.limit()
         ) _widec += 65536;
		break;
	}
				}
				break;
			}
		}
	}

	_match: do {
	_keys = _multipart_key_offsets[cs];
	_trans = _multipart_index_offsets[cs];
	_klen = _multipart_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < _multipart_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( _widec > _multipart_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _multipart_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _multipart_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( _widec > _multipart_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _multipart_indicies[_trans];
	cs = _multipart_trans_targs[_trans];

	if ( _multipart_trans_actions[_trans] != 0 ) {
		_acts = _multipart_trans_actions[_trans];
		_nacts = (int) _multipart_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _multipart_actions[_acts++] )
			{
	case 0:
// line 9 "src/rl/picard/http/MultipartParser.rl"
	{
            System.out.println("#start_delimiter - " + p);
            boundaryPos = 0;
            bodyEnd = p;
        }
	break;
	case 1:
// line 19 "src/rl/picard/http/MultipartParser.rl"
	{
            System.out.println("Parsing boundary");
            if (( buf.get(p)) == boundary.get(boundaryPos)) {
                ++boundaryPos;
            }
            else {
                System.out.println("Parsing boundary failed - " + p);
                p--;

                if (headers == null) {
                    {cs = 1; _goto_targ = 2; if (true) continue _goto;}
                }
                else {
                    {cs = 13; _goto_targ = 2; if (true) continue _goto;}
                }
            }
        }
	break;
	case 2:
// line 37 "src/rl/picard/http/MultipartParser.rl"
	{
            System.out.println("Starting headers: " + p);
            headers = callback.blankHeaders();
        }
	break;
	case 3:
// line 42 "src/rl/picard/http/MultipartParser.rl"
	{
            System.out.println("Ending headers: " + p);
            bodyStart = p;
        }
	break;
	case 4:
// line 47 "src/rl/picard/http/MultipartParser.rl"
	{
        }
	break;
	case 5:
// line 50 "src/rl/picard/http/MultipartParser.rl"
	{
        }
	break;
	case 6:
// line 53 "src/rl/picard/http/MultipartParser.rl"
	{
        }
	break;
	case 7:
// line 56 "src/rl/picard/http/MultipartParser.rl"
	{
        }
	break;
	case 8:
// line 59 "src/rl/picard/http/MultipartParser.rl"
	{
        }
	break;
	case 9:
// line 62 "src/rl/picard/http/MultipartParser.rl"
	{
        }
	break;
	case 10:
// line 74 "src/rl/picard/http/MultipartParser.rl"
	{
            System.out.println("!!! BAM: " + bodyStart + " - " + bodyEnd);
            ByteBuffer chunk = buf.asReadOnlyBuffer();

            chunk.position(bodyStart);
            chunk.limit(bodyEnd);

            callback.part(headers, chunk);
        }
	break;
	case 11:
// line 84 "src/rl/picard/http/MultipartParser.rl"
	{
            System.out.println("~~~~ ALL DONE");
            callback.done();
            {cs = 130; _goto_targ = 2; if (true) continue _goto;}
        }
	break;
	case 12:
// line 90 "src/rl/picard/http/MultipartParser.rl"
	{
            if (true) {
                throw new HttpParserException("Something went wrong");
            }
        }
	break;
// line 896 "src/jvm/picard/http/MultipartParser.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _multipart_eof_actions[cs];
	int __nacts = (int) _multipart_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _multipart_actions[__acts++] ) {
	case 12:
// line 90 "src/rl/picard/http/MultipartParser.rl"
	{
            if (true) {
                throw new HttpParserException("Something went wrong");
            }
        }
	break;
// line 925 "src/jvm/picard/http/MultipartParser.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 129 "src/rl/picard/http/MultipartParser.rl"
    }
}
